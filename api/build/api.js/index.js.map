{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","getDefault","getModuleExports","object","property","prototype","hasOwnProperty","p","s","http","express","ApolloServer","gql","PubSub","typeDefs","pubsub","resolvers","Query","hello","Subscription","subscribe","asyncIterator","Mutation","root","args","context","publish","app","server","introspection","playground","applyMiddleware","path","httpServer","createServer","installSubscriptionHandlers","listen","console","log","graphqlPath","subscriptionsPath"],"mappings":"2BACA,IAAAA,EAAA,GAGA,SAAAC,oBAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAC,QAGA,IAAAC,EAAAJ,EAAAE,GAAA,CACAG,EAAAH,EACAI,GAAA,EACAH,QAAA,IAUA,OANAI,EAAAL,GAAAM,KAAAJ,EAAAD,QAAAC,EAAAA,EAAAD,QAAAF,qBAGAG,EAAAE,GAAA,EAGAF,EAAAD,QA0DA,OArDAF,oBAAAQ,EAAAF,EAGAN,oBAAAS,EAAAV,EAGAC,oBAAAU,EAAA,SAAAR,EAAAS,EAAAC,GACAZ,oBAAAa,EAAAX,EAAAS,IACAG,OAAAC,eAAAb,EAAAS,EAAA,CAAAK,YAAA,EAAAC,IAAAL,KAKAZ,oBAAAkB,EAAA,SAAAhB,GACA,oBAAAiB,QAAAA,OAAAC,aACAN,OAAAC,eAAAb,EAAAiB,OAAAC,YAAA,CAAAC,MAAA,WAEAP,OAAAC,eAAAb,EAAA,aAAA,CAAAmB,OAAA,KAQArB,oBAAAsB,EAAA,SAAAD,EAAAE,GAEA,GADA,EAAAA,IAAAF,EAAArB,oBAAAqB,IACA,EAAAE,EAAA,OAAAF,EACA,GAAA,EAAAE,GAAA,iBAAAF,GAAAA,GAAAA,EAAAG,WAAA,OAAAH,EACA,IAAAI,EAAAX,OAAAY,OAAA,MAGA,GAFA1B,oBAAAkB,EAAAO,GACAX,OAAAC,eAAAU,EAAA,UAAA,CAAAT,YAAA,EAAAK,MAAAA,IACA,EAAAE,GAAA,iBAAAF,EAAA,IAAA,IAAAM,KAAAN,EAAArB,oBAAAU,EAAAe,EAAAE,EAAA,SAAAA,GAAA,OAAAN,EAAAM,IAAAC,KAAA,KAAAD,IACA,OAAAF,GAIAzB,oBAAA6B,EAAA,SAAA1B,GACA,IAAAS,EAAAT,GAAAA,EAAAqB,WACA,SAAAM,aAAA,OAAA3B,EAAA,SACA,SAAA4B,mBAAA,OAAA5B,GAEA,OADAH,oBAAAU,EAAAE,EAAA,IAAAA,GACAA,GAIAZ,oBAAAa,EAAA,SAAAmB,EAAAC,GAAA,OAAAnB,OAAAoB,UAAAC,eAAA5B,KAAAyB,EAAAC,IAGAjC,oBAAAoC,EAAA,GAIApC,oBAAAA,oBAAAqC,EAAA,qBClFA,MAAAC,EAAAtC,EAAA,GACAuC,EAAAvC,EAAA,IACAwC,aAAAA,EAAAC,IAAAA,EAAAC,OAAAA,GAAA1C,EAAA,GAGA2C,EAAAF;;;;;;;;;;EAWAG,EAAA,IAAAF,EAIAG,EAAA,CACAC,MAAA,CACAC,MAAA,IAAA,6CAEAC,aAAA,CACAD,MAAA,CAEAE,UAAA,IAAAL,EAAAM,cAAA,CAVA,YAaAC,SAAA,CACAJ,MAAA,CAAAK,EAAAC,EAAAC,KACAV,EAAAW,QAfA,QAeA,CAAAR,MAAAM,KACA,KAMAG,EAAAjB,IAEAkB,EAAA,IAAAjB,EAAA,CAAAG,SAAAA,EAAAE,UAAAA,EAAAa,eAAA,EAAAC,YAAA,IAEAF,EAAAG,gBAAA,CAAAJ,IAAAA,EAAAK,KAHA,MAKA,MAAAC,EAAAxB,EAAAyB,aAAAP,GACAC,EAAAO,4BAAAF,GAGAA,EAAAG,OAXA,IAWA,KACAC,QAAAC,+CAAAV,EAAAW,eACAF,QAAAC,oDAAAV,EAAAY","file":"index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","const http = require('http');\nconst express = require(\"express\");\nconst { ApolloServer, gql, PubSub  } = require(\"apollo-server-express\");\n\n// Construct a schema, using GraphQL schema language\nconst typeDefs = gql`\n  type Query {\n    hello: String\n  }\n  type Subscription {\n    hello: String\n  }\n  type Mutation {\n    hello(test: String): Boolean\n  }\n`;\nconst pubsub = new PubSub();\nconst HELLO = 'HELLO';\n\n// Provide resolver functions for your schema fields\nconst resolvers = {\n  Query: {\n    hello: () => \"Hello world from ApolloServer on Now 2.0!\"\n  },\n  Subscription: {\n    hello: {\n      // Additional event labels can be passed to asyncIterator creation\n      subscribe: () => pubsub.asyncIterator([HELLO]),\n    },\n  },\n  Mutation: {\n    hello(root, args, context) {\n      pubsub.publish(HELLO, { hello: args });\n      return true\n    },\n  },\n};\n\nconst PORT = 4000;\nconst app = express();\nconst path = '/'\nconst server = new ApolloServer({ typeDefs, resolvers, introspection: true, playground: true });\n\nserver.applyMiddleware({app, path})\n\nconst httpServer = http.createServer(app);\nserver.installSubscriptionHandlers(httpServer);\n\n// тЪая╕П Pay attention to the fact that we are calling `listen` on the http server variable, and not on `app`.\nhttpServer.listen(PORT, () => {\n  console.log(`ЁЯЪА Server ready at http://localhost:${PORT}${server.graphqlPath}`)\n  console.log(`ЁЯЪА Subscriptions ready at ws://localhost:${PORT}${server.subscriptionsPath}`)\n})"]}